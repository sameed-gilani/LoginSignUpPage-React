{"ast":null,"code":"import localforage from \"localforage\";\nimport { matchSorter } from \"match-sorter\";\nimport sortBy from \"sort-by\";\nexport async function getContacts(query) {\n  await fakeNetwork(`getContacts:${query}`);\n  let contacts = await localforage.getItem(\"contacts\");\n  if (!contacts) contacts = [];\n  if (query) {\n    contacts = matchSorter(contacts, query, {\n      keys: [\"first\", \"last\"]\n    });\n  }\n  return contacts.sort(sortBy(\"last\", \"createdAt\"));\n}\nexport async function createContact() {\n  await fakeNetwork();\n  let id = Math.random().toString(36).substring(2, 9);\n  let contact = {\n    id,\n    createdAt: Date.now()\n  };\n  let contacts = await getContacts();\n  contacts.unshift(contact);\n  await set(contacts);\n  return contact;\n}\nexport async function getContact(id) {\n  await fakeNetwork(`contact:${id}`);\n  let contacts = await localforage.getItem(\"contacts\");\n  let contact = contacts.find(contact => contact.id === id);\n  return contact !== null && contact !== void 0 ? contact : null;\n}\nexport async function updateContact(id, updates) {\n  await fakeNetwork();\n  let contacts = await localforage.getItem(\"contacts\");\n  let contact = contacts.find(contact => contact.id === id);\n  if (!contact) throw new Error(\"No contact found for\", id);\n  Object.assign(contact, updates);\n  await set(contacts);\n  return contact;\n}\nexport async function deleteContact(id) {\n  let contacts = await localforage.getItem(\"contacts\");\n  let index = contacts.findIndex(contact => contact.id === id);\n  if (index > -1) {\n    contacts.splice(index, 1);\n    await set(contacts);\n    return true;\n  }\n  return false;\n}\nfunction set(contacts) {\n  return localforage.setItem(\"contacts\", contacts);\n}\n\n// fake a cache so we don't slow down stuff we've already seen\nlet fakeCache = {};\nasync function fakeNetwork(key) {\n  if (!key) {\n    fakeCache = {};\n  }\n  if (fakeCache[key]) {\n    return;\n  }\n  fakeCache[key] = true;\n  return new Promise(res => {\n    setTimeout(res, Math.random() * 800);\n  });\n}","map":{"version":3,"names":["localforage","matchSorter","sortBy","getContacts","query","fakeNetwork","contacts","getItem","keys","sort","createContact","id","Math","random","toString","substring","contact","createdAt","Date","now","unshift","set","getContact","find","updateContact","updates","Error","Object","assign","deleteContact","index","findIndex","splice","setItem","fakeCache","key","Promise","res","setTimeout"],"sources":["/home/sameed/Desktop/LoginSignUpPage-React/routes_practice_from_reactdocs/src/contacts.js"],"sourcesContent":["import localforage from \"localforage\";\nimport { matchSorter } from \"match-sorter\";\nimport sortBy from \"sort-by\";\n\nexport async function getContacts(query) {\n    await fakeNetwork(`getContacts:${query}`);\n    let contacts = await localforage.getItem(\"contacts\");\n    if (!contacts) contacts = [];\n    if (query) {\n        contacts = matchSorter(contacts, query, { keys: [\"first\", \"last\"] });\n    }\n    return contacts.sort(sortBy(\"last\", \"createdAt\"));\n}\n\nexport async function createContact() {\n    await fakeNetwork();\n    let id = Math.random().toString(36).substring(2, 9);\n    let contact = { id, createdAt: Date.now() };\n    let contacts = await getContacts();\n    contacts.unshift(contact);\n    await set(contacts);\n    return contact;\n}\n\nexport async function getContact(id) {\n    await fakeNetwork(`contact:${id}`);\n    let contacts = await localforage.getItem(\"contacts\");\n    let contact = contacts.find(contact => contact.id === id);\n    return contact ?? null;\n}\n\nexport async function updateContact(id, updates) {\n    await fakeNetwork();\n    let contacts = await localforage.getItem(\"contacts\");\n    let contact = contacts.find(contact => contact.id === id);\n    if (!contact) throw new Error(\"No contact found for\", id);\n    Object.assign(contact, updates);\n    await set(contacts);\n    return contact;\n}\n\nexport async function deleteContact(id) {\n    let contacts = await localforage.getItem(\"contacts\");\n    let index = contacts.findIndex(contact => contact.id === id);\n    if (index > -1) {\n        contacts.splice(index, 1);\n        await set(contacts);\n        return true;\n    }\n    return false;\n}\n\nfunction set(contacts) {\n    return localforage.setItem(\"contacts\", contacts);\n}\n\n// fake a cache so we don't slow down stuff we've already seen\nlet fakeCache = {};\n\nasync function fakeNetwork(key) {\n    if (!key) {\n        fakeCache = {};\n    }\n\n    if (fakeCache[key]) {\n        return;\n    }\n\n    fakeCache[key] = true;\n    return new Promise(res => {\n        setTimeout(res, Math.random() * 800);\n    });\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}