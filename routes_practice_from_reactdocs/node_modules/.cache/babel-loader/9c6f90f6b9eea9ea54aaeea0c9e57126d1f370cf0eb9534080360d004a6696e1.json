{"ast":null,"code":"var objectPath = require('object-path');\nvar sortBy;\nvar sort;\nvar type;\n\n/**\n * Filters args based on their type\n * @param  {String} type Type of property to filter by\n * @return {Function}\n */\ntype = function (type) {\n  return function (arg) {\n    return typeof arg === type;\n  };\n};\n\n/**\n * Return a comparator function\n * @param  {String} property The key to sort by\n * @param  {Function} map Function to apply to each property\n * @return {Function}        Returns the comparator function\n */\nsort = function sort(property, map) {\n  var sortOrder = 1;\n  var apply = map || function (_, value) {\n    return value;\n  };\n  if (property[0] === \"-\") {\n    sortOrder = -1;\n    property = property.substr(1);\n  }\n  return function fn(a, b) {\n    var result;\n    var am = apply(property, objectPath.get(a, property));\n    var bm = apply(property, objectPath.get(b, property));\n    if (am < bm) result = -1;\n    if (am > bm) result = 1;\n    if (am === bm) result = 0;\n    return result * sortOrder;\n  };\n};\n\n/**\n * Return a comparator function that sorts by multiple keys\n * @return {Function} Returns the comparator function\n */\nsortBy = function sortBy() {\n  var args = Array.prototype.slice.call(arguments);\n  var properties = args.filter(type('string'));\n  var map = args.filter(type('function'))[0];\n  return function fn(obj1, obj2) {\n    var numberOfProperties = properties.length,\n      result = 0,\n      i = 0;\n\n    /* try getting a different result from 0 (equal)\n     * as long as we have extra properties to compare\n     */\n    while (result === 0 && i < numberOfProperties) {\n      result = sort(properties[i], map)(obj1, obj2);\n      i++;\n    }\n    return result;\n  };\n};\n\n/**\n * Expose `sortBy`\n * @type {Function}\n */\nmodule.exports = sortBy;","map":{"version":3,"names":["objectPath","require","sortBy","sort","type","arg","property","map","sortOrder","apply","_","value","substr","fn","a","b","result","am","get","bm","args","Array","prototype","slice","call","arguments","properties","filter","obj1","obj2","numberOfProperties","length","i","module","exports"],"sources":["/home/sameed/Desktop/LoginSignUpPage-React/routes_practice_from_reactdocs/node_modules/sort-by/index.js"],"sourcesContent":["var objectPath = require('object-path');\nvar sortBy;\nvar sort;\nvar type;\n\n/**\n * Filters args based on their type\n * @param  {String} type Type of property to filter by\n * @return {Function}\n */\ntype = function(type) {\n    return function(arg) {\n        return typeof arg === type;\n    };\n};\n\n/**\n * Return a comparator function\n * @param  {String} property The key to sort by\n * @param  {Function} map Function to apply to each property\n * @return {Function}        Returns the comparator function\n */\nsort = function sort(property, map) {\n    var sortOrder = 1;\n    var apply = map || function(_, value) { return value };\n\n    if (property[0] === \"-\") {\n        sortOrder = -1;\n        property = property.substr(1);\n    }\n\n    return function fn(a,b) {\n        var result;\n        var am = apply(property, objectPath.get(a, property));\n        var bm = apply(property, objectPath.get(b, property));\n        if (am < bm) result = -1;\n        if (am > bm) result = 1;\n        if (am === bm) result = 0;\n        return result * sortOrder;\n    }\n};\n\n/**\n * Return a comparator function that sorts by multiple keys\n * @return {Function} Returns the comparator function\n */\nsortBy = function sortBy() {\n\n    var args = Array.prototype.slice.call(arguments);\n    var properties = args.filter(type('string'));\n    var map = args.filter(type('function'))[0];\n\n    return function fn(obj1, obj2) {\n        var numberOfProperties = properties.length,\n            result = 0,\n            i = 0;\n\n        /* try getting a different result from 0 (equal)\n         * as long as we have extra properties to compare\n         */\n        while(result === 0 && i < numberOfProperties) {\n            result = sort(properties[i], map)(obj1, obj2);\n            i++;\n        }\n        return result;\n    };\n};\n\n/**\n * Expose `sortBy`\n * @type {Function}\n */\nmodule.exports = sortBy;"],"mappings":"AAAA,IAAIA,UAAU,GAAGC,OAAO,CAAC,aAAa,CAAC;AACvC,IAAIC,MAAM;AACV,IAAIC,IAAI;AACR,IAAIC,IAAI;;AAER;AACA;AACA;AACA;AACA;AACAA,IAAI,GAAG,SAAAA,CAASA,IAAI,EAAE;EAClB,OAAO,UAASC,GAAG,EAAE;IACjB,OAAO,OAAOA,GAAG,KAAKD,IAAI;EAC9B,CAAC;AACL,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACAD,IAAI,GAAG,SAASA,IAAIA,CAACG,QAAQ,EAAEC,GAAG,EAAE;EAChC,IAAIC,SAAS,GAAG,CAAC;EACjB,IAAIC,KAAK,GAAGF,GAAG,IAAI,UAASG,CAAC,EAAEC,KAAK,EAAE;IAAE,OAAOA,KAAK;EAAC,CAAC;EAEtD,IAAIL,QAAQ,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;IACrBE,SAAS,GAAG,CAAC,CAAC;IACdF,QAAQ,GAAGA,QAAQ,CAACM,MAAM,CAAC,CAAC,CAAC;EACjC;EAEA,OAAO,SAASC,EAAEA,CAACC,CAAC,EAACC,CAAC,EAAE;IACpB,IAAIC,MAAM;IACV,IAAIC,EAAE,GAAGR,KAAK,CAACH,QAAQ,EAAEN,UAAU,CAACkB,GAAG,CAACJ,CAAC,EAAER,QAAQ,CAAC,CAAC;IACrD,IAAIa,EAAE,GAAGV,KAAK,CAACH,QAAQ,EAAEN,UAAU,CAACkB,GAAG,CAACH,CAAC,EAAET,QAAQ,CAAC,CAAC;IACrD,IAAIW,EAAE,GAAGE,EAAE,EAAEH,MAAM,GAAG,CAAC,CAAC;IACxB,IAAIC,EAAE,GAAGE,EAAE,EAAEH,MAAM,GAAG,CAAC;IACvB,IAAIC,EAAE,KAAKE,EAAE,EAAEH,MAAM,GAAG,CAAC;IACzB,OAAOA,MAAM,GAAGR,SAAS;EAC7B,CAAC;AACL,CAAC;;AAED;AACA;AACA;AACA;AACAN,MAAM,GAAG,SAASA,MAAMA,CAAA,EAAG;EAEvB,IAAIkB,IAAI,GAAGC,KAAK,CAACC,SAAS,CAACC,KAAK,CAACC,IAAI,CAACC,SAAS,CAAC;EAChD,IAAIC,UAAU,GAAGN,IAAI,CAACO,MAAM,CAACvB,IAAI,CAAC,QAAQ,CAAC,CAAC;EAC5C,IAAIG,GAAG,GAAGa,IAAI,CAACO,MAAM,CAACvB,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;EAE1C,OAAO,SAASS,EAAEA,CAACe,IAAI,EAAEC,IAAI,EAAE;IAC3B,IAAIC,kBAAkB,GAAGJ,UAAU,CAACK,MAAM;MACtCf,MAAM,GAAG,CAAC;MACVgB,CAAC,GAAG,CAAC;;IAET;AACR;AACA;IACQ,OAAMhB,MAAM,KAAK,CAAC,IAAIgB,CAAC,GAAGF,kBAAkB,EAAE;MAC1Cd,MAAM,GAAGb,IAAI,CAACuB,UAAU,CAACM,CAAC,CAAC,EAAEzB,GAAG,CAAC,CAACqB,IAAI,EAAEC,IAAI,CAAC;MAC7CG,CAAC,EAAE;IACP;IACA,OAAOhB,MAAM;EACjB,CAAC;AACL,CAAC;;AAED;AACA;AACA;AACA;AACAiB,MAAM,CAACC,OAAO,GAAGhC,MAAM"},"metadata":{},"sourceType":"script","externalDependencies":[]}